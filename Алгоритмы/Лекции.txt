Урок 5.
  Сортировка пузырьком
Урок 6. 
  Связанные списки, указатель на указатель, утечка памяти, стек, куча
  
  
  
Устройство памяти:
DATA	
Сегмент
STACK	Стек
HEAP куча


int x = 5;
int* px = &x;
int** ppx = &px;
int*** pppx = &ppx;
cout << x << *px << **ppx << ***pppx;


!!!Связанный список

Реимпритация указателя

int x = 5;
void *p = &x;

#include <iostream>

struct node_t {
    int data;
    node_t *next;
};

------------------------------------
Адрес из функции возвращать нельзя!!!

Связанный список

s node_t {
	int data;
	node_t *next;
};

void go_through(node_t *p)
{
	while (p != nullptr){
		std::cout << p->data << '\n';
		p = p->next;
	}
}


int main()
{
	node_t A[5];
	for(int i = 0; i < 5; i++){
		A[i].data = i + 1;
		A[i].next = A + i + 1;
	}

	A[4].next = nullptr;
	

	node_t *p_begin = A;
	go_through(p_begin);
	


	return 0;
}

Можно организовать очередь, ставку



Практика программирования(Осенью) -> Алгоритмы и структуры данных
-> Анализ данных(Python)


Двумерный масивы в Си/С++

int 


Алгоритмы на С++ Лекция №7

Двумерный массив

Двумерный масив хранится построчно

1234
5678

A[i][j] = *(p + i*M + j) = p[i*M + j]

Двумерные динамические массивы

Пользушся массивами будь добр очистить память


Лекция №8

Поиск в массиве

Линейный поиск в массиве
O(1)

Очень важно четко поставить задачу

int find(int A[], int N, int x)
{
	for (int i = 0; i < N; i++){
		if(A[i] == x) {
			return i;
		}
	return -1
}


Для поиска делим попалам и смотрим к какую сторону идти дальше
33:28
 

!Поиск в массиве двоичный
- Массив должен быть упорядочен 
O(log2N)

int main()
{
	int N = 10;
	int A[] = {1, 3, 3, 7
	int x;
	
	cin >> x;
	cout << "index of x is: "

O(N^2) + O(log2N) 

Универсальные квадратичные сортировки
!Какая то сортировка через минимум 


!Сортировки вставками O(N^2) 
for(int pos; pos < N; pos++){
	i = pos;
	

Мощность

! Сортировка подсчетом O(N)

 	count_sort


#include <iostream>
using namespace std;

void count_sort(int A[], int N)
{
	//Обязан знать диапазон сортированных чисел
	int F[10] = {0};
	for(int i = 0; i < N; i++)
		F 
}

void generate_random_array(int A[], int N, int M)
{
	
}



int main()
{
	int N = 10;
	int A[N];

	for(int 

2:00:13

-------------------------------Лекция8---------
02:30
!Поразрядная сортировка O(M * N) 
M = log2(max(A[i]))

---------------Лекция9----------------
!Рекурсия
Рекурсия - способ решения задачи сведения ее к подзадаче, аналагичной исходной

Рекуррентные случай
Крайний случай

Прямой ход рекурсии
Обратный ход рекурсии

!Алгоритм Евклида

Рекурсия большой расход памяти

стек 
выводв локальных переменых

!Быстрое возведение в степень

!Хануйские башни
1:51:15

