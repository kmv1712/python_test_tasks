jewelry, stones =  input(), input()
print(len([i for i in stones if i in jewelry]))


# Подумать не укладываюсь в 1с и 10мб
сount_int = int(input())
total = sorted(set([input() for i in range(count_int)]))
for j in total:
	print(j)


count_int = int(input())
list_with_input_int = []
for i in range(count_int):
    user_input = int(input()) 
    if not user_input in list_with_input_int:
        list_with_input_int.append(user_input)
list_with_input_int.sort()
for j in list_with_input_int:
    print(j)

# print('\n'.join(map(lambda x: str(x), list_with_input_int)))

# Укладываюсь в 1с и 10мб
# время 483ms
for j in sorted(list(set(int(input()) for i in range(int(input()))))):
    print(j)

# время 490ms
count_int = int(input())
for j in sorted(list(set(int(input()) for i in range(count_int)))):
    print(j)

# Удивительно, но не укладываюсь в 10мб, я думал что без list быстрее, но оказалось set сортируется дольше
count_int = int(input())
for j in sorted(set(int(input()) for i in range(count_int))):
    print(j)

# Анаграммы 
print(int(sorted(list(input())) == sorted(list(input()))))

# Самая длинная последовательность едениц
print(len(max(''.join([input() for i in range(int(input()))]).split('0'))))

def quicksort(array):
    if len(array) < 2:
        return array
    else:
        pivot = array[0]
        less = [i for i in array[1:] if i <= pivot]
        greater = [i for i in array[1:] if i > pivot]
        return quicksort(less) + [pivot] + quicksort(greater)

# Быстрая сортировка
list_all = []

for i in range(int(input())):
    list_all.extend(list(map(lambda x: int(x), input().split(' ')[1:])))

for j in quicksort(list_all):
    print(j, end=' ')

# Скобки
# Итеративный
def get_list_valid_brackets_sequences(quantity_brackets, arr):
    # запишем нулевую последовательность
    list_valid_brackets_sequences = [' '.join(arr)]
    while True:
        ind = quantity_brackets - 1
        cnt = 0
        # находим откр. скобку, которую можно заменить
        while ind >= 0:
            if arr[ind] == ')':
                cnt -= 1
            if arr[ind] == '(':
                cnt += 1
            if cnt < 0 and arr[ind] =='(':
                break
            ind -= 1
        # если не нашли, то алгоритм заканчивает работу
        if ind < 0:
            break
        # заменяем на закр. скобку
        arr[ind] = ')'
        # заменяем на самую лексикографическую минимальную
        for i in range(ind + 1, quantity_brackets):
            if i <= (quantity_brackets - ind + cnt) / 2 + ind:
                arr[i] = '('
            else:
                arr[i] = ')'
        list_valid_brackets_sequences.append(' '.join(arr))
    return list_valid_brackets_sequences

list_valid_brackets_sequences = get_list_valid_brackets_sequences(quantity_brackets, arr)
for i in list_valid_brackets_sequences:
    print(i)
    
    
# Рекурсивный
quantity_brackets = 6 # количество скобок
arr = [0] * quantity_brackets # пустой список, куда кладем скобки
difference_between_brackets = 0 # разница между скобками
index_insert_bracket = 0 # индекс, по которому кладем скобку в список 

def print_valid_brackets_sequences(difference_between_brackets, index_insert_bracket, quantity_brackets, arr):
    # кладем откр. скобку, только если хватает места
    if (difference_between_brackets <= quantity_brackets - index_insert_bracket - 2):
        arr[index_insert_bracket] = '('
        print_valid_brackets_sequences(difference_between_brackets + 1, index_insert_bracket + 1, quantity_brackets, arr)
    # закр. скобку можно положить всегда, если cnt > 0
    if difference_between_brackets > 0:
        arr[index_insert_bracket] = ')'
        print_valid_brackets_sequences(difference_between_brackets - 1, index_insert_bracket + 1, quantity_brackets, arr)
    # выходим из цикла и печатаем
    if index_insert_bracket == quantity_brackets:
        if difference_between_brackets == 0:
            print(arr)

print_valid_brackets_sequences(difference_between_brackets, index_insert_bracket, quantity_brackets, arr)
